---

# Gather existing entries facts by using HTTP GET Request against the
# SLB Real Server endpoint, and then register the result into the
# 'real_server_gather_results' var. Failed when the HTTP return code
# is anything other than 200 or 302.
- name: Gather FAD SLB Real Server facts for create task.
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoint.slb_real_server }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: real_server_gather_results
  failed_when: "real_server_gather_results.status not in [200, 302]"
  tags: [get]

# Will print out the value of the collected facts registered from the
# previous task.
- name: Debug out FAD SLB Real Server gathered facts.
  ansible.builtin.debug:
    msg: "{{ real_server_gather_results.json.payload }}"
  tags: [debug]

# This task will check if our desired entries in our vars already exist or not
# in the previously gathered fact. If yes, then that entry will be skipped.
# If not exist, that entry will be created.
- name: Add FAD SLB Real Server entry if not exist.
  vars:
    existing_real_servers: "{{ real_server_gather_results.json.payload | json_query('[].mkey') }}"
  ansible.builtin.uri:
    method: POST
    url: "{{ fad_api_endpoint.slb_real_server }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "mkey": "{{ real_server.name | default(real_server.address) | string }}",
        "address": "{{ real_server.address | string }}",
        "address6": "{{ real_server.address6 | default('::') | string }}",
        "type": "{{ real_server.type | default('ip') | string }}",
        "server_type": "{{ real_server.server_type | default('static') | string }}",
        "sdn_addr_private": "{{ real_server.disable | default('disable') | string }}",
        "status": "{{ real_server.status | default('enable') | string }}"
      }
  register: real_server_create_results
  loop: "{{ fad_slb_real_servers }}"
  loop_control:
    loop_var: real_server
    label: "{{ real_server.name | default(real_server.address) }}"
  when: >
    (real_server.name | default(real_server.address)) not in existing_real_servers
  changed_when: "real_server_create_results.json.payload == 0"
  failed_when: "real_server_create_results.json.payload not in [0, -15]"
  tags: [post]

# Re-gather existing entries facts to prepare for update tasks.
- name: Re-gather FAD SLB Real Server facts for update task.
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoint.slb_real_server }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: real_server_regather_results
  failed_when: "real_server_regather_results.status not in [200, 302]"
  tags: [get]

# Will print out the value of the re-gathered entries.
- name: Debug out FAD SLB Real Server re-gathered facts.
  ansible.builtin.debug:
    msg: "{{ real_server_regather_results.json.payload }}"
  tags: [debug]

# For each loop, it will check if there's any entry that needs to be updated. Those entry will be
# updated with the new data if there's a difference between the gathered facts and our desired
# configuration in the vars.
- name: Update FAD SLB Real Server entry if entry exists and needs update.
  vars:
    current_real_server_facts: "{{ real_server_regather_results.json.payload }}"
  ansible.builtin.uri:
    method: PUT
    url: "{{ fad_api_endpoint.slb_real_server }}&mkey={{ real_server.name | default(real_server.address) }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "address": "{{ real_server.address | string }}",
        "address6": "{{ real_server.address6 | default('::') | string }}",
        "type": "{{ real_server.type | default('ip') }}",
        "server_type": "{{ real_server.server_type | default('static') | string }}",
        "sdn_addr_private": "{{ real_server.sdn_addr_private | default('disable') | string }}",
        "status": "{{ real_server.status | default('enable') | string }}"
      }
  register: fad_slb_real_server_put_results
  loop: "{{ fad_slb_real_servers }}"
  loop_control:
    loop_var: real_server
    label: "{{ real_server.name | default(real_server.address) }}"
  when: >
    ((current_real_server_facts | json_query('[?mkey==`' + (real_server.name | default(real_server.address)) + '`].address') | join) !=
    (real_server.address | string)) or
    ((current_real_server_facts | json_query('[?mkey==`' + (real_server.name | default(real_server.address)) + '`].address6') | join) !=
    (real_server.address6 | default('::') | string)) or
    ((current_real_server_facts | json_query('[?mkey==`' + (real_server.name | default(real_server.address)) + '`].type') | join) !=
    (real_server.type | default('ip') | string)) or
    ((current_real_server_facts | json_query('[?mkey==`' + (real_server.name | default(real_server.address)) + '`].server_type') | join) !=
    (real_server.server_type | default('static') | string)) or
    ((current_real_server_facts | json_query('[?mkey==`' + (real_server.name | default(real_server.address)) + '`].sdn_addr_private') | join) !=
    (real_server.sdn_addr_private | default('disable') | string)) or
    ((current_real_server_facts | json_query('[?mkey==`' + (real_server.name | default(real_server.address)) + '`].status') | join) !=
    (real_server.status | default('enable') | string))
  changed_when: "fad_slb_real_server_put_results.json.payload == 0"
  failed_when: "fad_slb_real_server_put_results.json.payload not in [0, -15]"
  tags: [put]

# Final re-gather and print out for debugging purpose, will be skipped if you skip 'debug' tag.
- name: Debug out FAD SLB Real Server final value after update task.
  ansible.builtin.debug:
    msg: >
      {{ (lookup('url', fad_api_endpoint.slb_real_server, validate_certs=false, split_lines=false, headers=fad_api_header) | from_json).get('payload') }}
  tags: [debug, get]
