---

# do a HTTP Get request against the SLB Real Server endpoint, using
# fad_slb_real_server entry, where "name" is used as mkey, and  will
# output the json content of the entry
# if you want to skip this task, use --skip-tags "debug"
- name: Get the existing FAD SLB Real Server entries.
  ansible.builtin.debug:
    msg: >
      {{ (lookup('url', fad_api_endpoint.slb_real_server + '&mkey=' +
      fad_slb_real_server.name, validate_certs=false, split_lines=false,
      headers=fad_api_header) | from_json).get('payload') }}
  register: fad_slb_real_server_get_results
  loop: "{{ fad_slb_real_servers }}"
  loop_control:
    loop_var: fad_slb_real_server
    label: "{{ fad_slb_real_server.name }}"
  tags: [debug, get]

# will do HTTP Get request to check if entry exists or not, if not exists,
# will create new entry via HTTP Post via the SLB Real Server endpoint,
# and will be skipped if entry already exist
# will fail if the returned paylod is not 0 (success) or -15 (duplicate entry)
- name: Add FAD SLB Real Server entry if not exist.
  ansible.builtin.uri:
    method: POST
    url: "{{ fad_api_endpoint.slb_real_server }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "mkey": "{{ fad_slb_real_server.name | string }}",
        "address": "{{ fad_slb_real_server.address | string }}",
        "address6": "{{ fad_slb_real_server.address6 | default('::') | string }}",
        "type": "{{ fad_slb_real_server.type | default('ip') | string }}",
        "server_type": "{{ fad_slb_real_server.server_type | default('static') | string }}",
        "sdn_addr_private": "{{ fad_slb_real_server.disable | default('disable') | string }}",
        "status": "{{ fad_slb_real_server.status | default('enable') | string }}"
      }
  register: fad_slb_real_server_post_results
  loop: "{{ fad_slb_real_servers }}"
  loop_control:
    loop_var: fad_slb_real_server
    label: "{{ fad_slb_real_server.name }}"
  when: >
      (lookup('url', fad_api_endpoint.slb_real_server + '&mkey=' +
      fad_slb_real_server.name, validate_certs=false, split_lines=false,
      headers=fad_api_header) | from_json).get('payload').mkey is undefined
  changed_when: "fad_slb_real_server_post_results.json.payload == 0"
  failed_when: "fad_slb_real_server_post_results.json.payload not in [0, -15]"
  tags: [post]

# will do a HTTP Get request first, and then do HTTP Put request if entry already exists
# and there's a difference between existing data in the device in our configured vars
- name: Update FAD SLB Real Server entry if entry exists and needs update.
  ansible.builtin.uri:
    method: PUT
    url: "{{ fad_api_endpoint.slb_real_server }}&mkey={{ fad_slb_real_server.name }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "address": "{{ fad_slb_real_server.address | string }}",
        "address6": "{{ fad_slb_real_server.address6 | default("::") | string }}",
        "type": "{{ fad_slb_real_server.type | default("ip") }}",
        "server_type": "{{ fad_slb_real_server.server_type | default('static') | string }}",
        "sdn_addr_private": "{{ fad_slb_real_server.sdn_addr_private | default('disable') }}",
        "status": "{{ fad_slb_real_server.status | default('enable') | string }}"
      }
  register: fad_slb_real_server_put_results
  loop: "{{ fad_slb_real_servers }}"
  loop_control:
    loop_var: fad_slb_real_server
    label: "{{ fad_slb_real_server.name }}"
  when: >
    (lookup('url', fad_api_endpoint.slb_real_server + '&mkey=' +
    fad_slb_real_server.name, validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').mkey is defined and
    (lookup('url', fad_api_endpoint.slb_real_server + '&mkey=' +
    fad_slb_real_server.name, validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').address != fad_slb_real_server.address | string or
    (lookup('url', fad_api_endpoint.slb_real_server + '&mkey=' +
    fad_slb_real_server.name, validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').address6 != fad_slb_real_server.address6 | default('::') | string or
    (lookup('url', fad_api_endpoint.slb_real_server + '&mkey=' +
    fad_slb_real_server.name, validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').type != fad_slb_real_server.type | default('ip') or
    (lookup('url', fad_api_endpoint.slb_real_server + '&mkey=' +
    fad_slb_real_server.name, validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').server_type != fad_slb_real_server.server_type | default('static') | string or
    (lookup('url', fad_api_endpoint.slb_real_server + '&mkey=' +
    fad_slb_real_server.name, validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').sdn_addr_private != fad_slb_real_server.sdn_addr_private | default('disable') or
    (lookup('url', fad_api_endpoint.slb_real_server + '&mkey=' +
    fad_slb_real_server.name, validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').status != fad_slb_real_server.status | default('enable') | string
  changed_when: "fad_slb_real_server_post_results.json.payload == 0"
  failed_when: "fad_slb_real_server_post_results.json.payload not in [0, -15]"
  tags: [put]
